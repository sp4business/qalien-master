'use client';

import { useState, useEffect } from 'react';
import { fetchAuthSession } from 'aws-amplify/auth';
import { useRouter, useSearchParams } from 'next/navigation';
import AuthWrapper from './AuthWrapper';
import InviteTeamStep from './InviteTeamStep';
import ExtractedLogos from './ExtractedLogos';
import { API_ENDPOINT } from '../aws-config';

// QAlien Brand Configuration Types (based on our data schemas)
interface BrandConfig {
  brand_name: string;
  industry: string;
  description?: string;
  website?: string;
  brand_tone?: string;
  color_palette: string[];
  disclaimers_required: string[];
  brand_vocabulary: {
    approved: string[];
    banned: string[];
    required: string[];
  };
}

interface FileUpload {
  file: File;
  preview?: string;
}

interface PDFAnalysisResult {
  logos?: {
    s3_key: string;
    confidence: number;
    page_number: number;
    bounding_box?: {
      x: number;
      y: number;
      width: number;
      height: number;
    };
  }[];
  colors?: {
    hex: string;
    rgb: number[];
    frequency: number;
    confidence: string;
    source: string;
    source_detail?: string;
  }[];
  disclaimers?: string[];
  vocabulary?: {
    approved: string[];
    banned: string[];
  };
  isProcessing: boolean;
  isComplete: boolean;
  error?: string;
  analysis_id?: string;
}

// Wizard Steps based on QAlien detailed flows
enum OnboardingStep {
  COMPANY_INFO = 0,
  BRAND_GUIDELINES = 1,
  VISUAL_IDENTITY = 2,
  VERBAL_IDENTITY = 3,
  GOLDEN_SET = 4,
  INVITE_TEAM = 5,
  REVIEW = 6
}

export default function BrandOnboardingWizard() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const orgId = searchParams.get('org');

  const [currentStep, setCurrentStep] = useState(OnboardingStep.COMPANY_INFO);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitResult, setSubmitResult] = useState<any>(null);
  const [redirectCountdown, setRedirectCountdown] = useState<number | null>(null);
  const [skipAutoRedirect, setSkipAutoRedirect] = useState(false);

  // Form data based on QAlien brand schema
  const [brandConfig, setBrandConfig] = useState<BrandConfig>({
    brand_name: '',
    industry: '',
    description: '',
    website: '',
    brand_tone: '',
    color_palette: [],
    disclaimers_required: [],
    brand_vocabulary: {
      approved: [],
      banned: [],
      required: []
    }
  });

  const [files, setFiles] = useState<{
    guidelines?: FileUpload;
    logos: FileUpload[];
    goldenSet: FileUpload[];
  }>({
    logos: [],
    goldenSet: []
  });

  // PDF Analysis state
  const [pdfAnalysis, setPdfAnalysis] = useState<PDFAnalysisResult>({
    isProcessing: false,
    isComplete: false
  });

  // Visual Identity mode - 'auto' for PDF extracted, 'manual' for user input
  const [visualIdentityMode, setVisualIdentityMode] = useState<'auto' | 'manual'>('manual');
  
  // Selected logo keys from extracted logos
  const [selectedLogoKeys, setSelectedLogoKeys] = useState<string[]>([]);
  const [isConfirmingLogos, setIsConfirmingLogos] = useState(false);
  const [brandId, setBrandId] = useState<string | null>(null);

  const steps = [
    { id: OnboardingStep.COMPANY_INFO, title: 'Company Info', description: 'Basic brand information' },
    { id: OnboardingStep.BRAND_GUIDELINES, title: 'Guidelines', description: 'Upload brand guidelines PDF' },
    { id: OnboardingStep.VISUAL_IDENTITY, title: 'Visual Identity', description: 'Logos and color palette' },
    { id: OnboardingStep.VERBAL_IDENTITY, title: 'Verbal Identity', description: 'Tone and vocabulary rules' },
    { id: OnboardingStep.GOLDEN_SET, title: 'Golden Set', description: 'Perfect example creatives (optional)' },
    { id: OnboardingStep.INVITE_TEAM, title: 'Invite Team', description: 'Add collaborators (optional)' },
    { id: OnboardingStep.REVIEW, title: 'Review', description: 'Confirm and submit' }
  ];

  const updateBrandConfig = (updates: Partial<BrandConfig>) => {
    setBrandConfig(prev => ({ ...prev, ...updates }));
  };

  const handleSubmit = async () => {
    setIsSubmitting(true);
    try {
      const session = await fetchAuthSession();
      const token = session.tokens?.idToken?.toString();

      if (!token) {
        throw new Error('No authentication token available');
      }

      // For now, submit the basic brand info (matching our current API)
      // TODO: Extend API to handle multipart form with file uploads
      const response = await fetch('https://6wfvvuvm25.execute-api.us-east-1.amazonaws.com/dev/brand/onboard', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          brand_name: brandConfig.brand_name,
          industry: brandConfig.industry,
          description: brandConfig.description,
          website: brandConfig.website
        })
      });

      const result = await response.json();
      setSubmitResult({ status: response.status, data: result });
      
      if (response.ok) {
        console.log('Brand onboarded successfully:', result);
        // Start countdown for auto-redirect to Business Center
        setRedirectCountdown(3);
      }
    } catch (error) {
      console.error('Error submitting brand:', error);
      setSubmitResult({ error: error instanceof Error ? error.message : 'An unknown error occurred' });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Auto-redirect countdown effect
  useEffect(() => {
    if (redirectCountdown !== null && redirectCountdown > 0 && !skipAutoRedirect) {
      const timer = setTimeout(() => {
        setRedirectCountdown(redirectCountdown - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (redirectCountdown === 0 && !skipAutoRedirect) {
      // Redirect to Business Center
      router.push('/');
    }
  }, [redirectCountdown, skipAutoRedirect, router]);

  const handleGoNow = () => {
    setRedirectCountdown(null);
    router.push('/');
  };

  const handleSkipRedirect = () => {
    setSkipAutoRedirect(true);
    setRedirectCountdown(null);
  };

  const handleConfirmLogos = async (selectedKeys: string[], brandIdToUse: string) => {
    if (!selectedKeys.length || !brandIdToUse) return;
    
    setIsConfirmingLogos(true);
    try {
      const session = await fetchAuthSession();
      const token = session.tokens?.idToken?.toString();

      if (!token) {
        throw new Error('No authentication token available');
      }

      const response = await fetch(`${API_ENDPOINT}/brands/${brandIdToUse}/logos/confirm`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          selected_logo_keys: selectedKeys
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to confirm logos');
      }

      const result = await response.json();
      console.log('Logos confirmed successfully:', result);
      
      // Update brandConfig with confirmed logos
      updateBrandConfig({ logo_files: result.logo_files });
      
      // Clear selection after confirmation
      setSelectedLogoKeys([]);
      
    } catch (error) {
      console.error('Error confirming logos:', error);
      alert(`Failed to confirm logos: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsConfirmingLogos(false);
    }
  };

  const nextStep = () => {
    if (currentStep < OnboardingStep.REVIEW) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > OnboardingStep.COMPANY_INFO) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleCancel = () => {
    if (orgId) {
      router.push(`/?org=${orgId}`);
    } else {
      router.push('/');
    }
  };

  const canProceed = () => {
    switch (currentStep) {
      case OnboardingStep.COMPANY_INFO:
        return brandConfig.brand_name && brandConfig.industry;
      case OnboardingStep.BRAND_GUIDELINES:
        return true; // Optional for now
      case OnboardingStep.VISUAL_IDENTITY:
        return true; // Optional for now
      case OnboardingStep.VERBAL_IDENTITY:
        return true; // Optional for now
      case OnboardingStep.GOLDEN_SET:
        return true; // Always optional
      case OnboardingStep.INVITE_TEAM:
        return true; // Optional - can skip
      case OnboardingStep.REVIEW:
        return true;
      default:
        return false;
    }
  };


  return (
    <AuthWrapper>
      <div className="max-w-5xl mx-auto py-12 px-6">
        {/* Header */}
        <div className="mb-12 text-center">
          <h1 className="text-4xl font-bold text-purple-400 mb-4">
            Brand Onboarding
          </h1>
          <p className="text-gray-400 text-lg max-w-2xl mx-auto">
            Set up your brand for AI-powered compliance analysis with our guided onboarding experience
          </p>
        </div>

        {/* Progress Steps */}
        <div className="mb-12">
          <div className="relative">
            {/* Progress line */}
            <div className="absolute top-6 left-0 w-full h-0.5 bg-gray-700">
              <div 
                className="h-full bg-gradient-to-r from-purple-500 to-purple-400 transition-all duration-500 ease-out"
                style={{ width: `${(currentStep / (steps.length - 1)) * 100}%` }}
              />
            </div>
            
            {/* Steps */}
            <div className="relative flex items-center justify-between">
              {steps.map((step, index) => (
                <div key={step.id} className="flex flex-col items-center">
                  <div className={`w-12 h-12 rounded-full flex items-center justify-center text-sm font-semibold border-2 transition-all duration-300 ${
                    index <= currentStep 
                      ? 'bg-gradient-to-r from-purple-500 to-purple-400 text-white border-transparent shadow-lg scale-110' 
                      : index === currentStep + 1
                      ? 'bg-[#2A3142] text-gray-400 border-gray-600 shadow-md'
                      : 'bg-[#1A1F2E] text-gray-500 border-gray-700'
                  }`}>
                    {index <= currentStep ? (
                      <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                      </svg>
                    ) : (
                      index + 1
                    )}
                  </div>
                  <div className="text-center mt-3 max-w-24">
                    <div className={`text-sm font-medium transition-colors ${
                      index <= currentStep ? 'text-white' : 'text-gray-500'
                    }`}>
                      {step.title}
                    </div>
                    <div className="text-xs text-gray-600 mt-1 leading-tight">
                      {step.description}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Step Content */}
        <div className="bg-[#2A3142] rounded-2xl shadow-xl border border-gray-700 p-8 mb-8">
          {currentStep === OnboardingStep.COMPANY_INFO && (
            <CompanyInfoStep 
              brandConfig={brandConfig} 
              updateBrandConfig={updateBrandConfig} 
            />
          )}
          
          {currentStep === OnboardingStep.BRAND_GUIDELINES && (
            <GuidelinesStep 
              files={files} 
              setFiles={setFiles}
              pdfAnalysis={pdfAnalysis}
              setPdfAnalysis={setPdfAnalysis}
              setVisualIdentityMode={setVisualIdentityMode}
              setBrandId={setBrandId}
            />
          )}
          
          {currentStep === OnboardingStep.VISUAL_IDENTITY && (
            <VisualIdentityStep 
              brandConfig={brandConfig} 
              updateBrandConfig={updateBrandConfig}
              files={files} 
              setFiles={setFiles}
              pdfAnalysis={pdfAnalysis}
              visualIdentityMode={visualIdentityMode}
              setVisualIdentityMode={setVisualIdentityMode}
              selectedLogoKeys={selectedLogoKeys}
              setSelectedLogoKeys={setSelectedLogoKeys}
              brandId={brandId}
              handleConfirmLogos={handleConfirmLogos}
              isConfirmingLogos={isConfirmingLogos}
            />
          )}
          
          {currentStep === OnboardingStep.VERBAL_IDENTITY && (
            <VerbalIdentityStep 
              brandConfig={brandConfig} 
              updateBrandConfig={updateBrandConfig} 
            />
          )}
          
          {currentStep === OnboardingStep.GOLDEN_SET && (
            <GoldenSetStep 
              files={files} 
              setFiles={setFiles} 
            />
          )}
          
          {currentStep === OnboardingStep.INVITE_TEAM && (
            <InviteTeamStep 
              brandId={submitResult?.data?.brand_id}
              brandName={brandConfig.brand_name}
            />
          )}
          
          {currentStep === OnboardingStep.REVIEW && (
            <ReviewStep 
              brandConfig={brandConfig} 
              files={files}
              onSubmit={handleSubmit}
              isSubmitting={isSubmitting}
              submitResult={submitResult}
              redirectCountdown={redirectCountdown}
              skipAutoRedirect={skipAutoRedirect}
              handleGoNow={handleGoNow}
              handleSkipRedirect={handleSkipRedirect}
            />
          )}
        </div>

        {/* Navigation */}
        <div className="flex justify-between items-center">
          {currentStep === OnboardingStep.COMPANY_INFO ? (
            <button
              onClick={handleCancel}
              className="group flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-red-700 to-red-600 text-white rounded-xl hover:from-red-800 hover:to-red-700 transition-all duration-200 shadow-lg hover:shadow-xl"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
              <span>Cancel</span>
            </button>
          ) : (
            <button
              onClick={prevStep}
              disabled={currentStep === OnboardingStep.COMPANY_INFO}
              className="group flex items-center space-x-2 px-6 py-3 text-gray-400 border border-gray-600 rounded-xl hover:bg-[#2A3142] hover:border-gray-500 hover:text-white disabled:opacity-40 disabled:cursor-not-allowed transition-all duration-200"
            >
              <svg className="w-4 h-4 group-hover:-translate-x-0.5 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              <span>Previous</span>
            </button>
          )}
          
          {/* Step indicator */}
          <div className="flex items-center space-x-2">
            <span className="text-sm text-gray-500">
              Step {currentStep + 1} of {steps.length}
            </span>
          </div>
          
          {currentStep < OnboardingStep.REVIEW ? (
            <div className="flex items-center space-x-3">
              {currentStep === OnboardingStep.INVITE_TEAM && (
                <button
                  onClick={nextStep}
                  className="px-6 py-3 text-gray-300 hover:text-white transition-colors"
                >
                  Skip for Now
                </button>
              )}
              <button
                onClick={nextStep}
                disabled={!canProceed()}
                className="group flex items-center space-x-2 px-8 py-3 bg-gradient-to-r from-purple-600 to-purple-500 text-white rounded-xl hover:from-purple-700 hover:to-purple-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-lg hover:shadow-xl"
              >
                <span>{currentStep === OnboardingStep.INVITE_TEAM ? 'Next Step' : 'Continue'}</span>
                <svg className="w-4 h-4 group-hover:translate-x-0.5 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          ) : null}
        </div>
      </div>
    </AuthWrapper>
  );
}

// Step Components (adapted from lovable patterns, following QAlien schema)

interface CompanyInfoStepProps {
  brandConfig: BrandConfig;
  updateBrandConfig: (updates: Partial<BrandConfig>) => void;
}

function CompanyInfoStep({ brandConfig, updateBrandConfig }: CompanyInfoStepProps) {
  return (
    <div className="space-y-8">
      <div className="text-center">
        <div className="w-16 h-16 bg-gradient-to-r from-emerald-400 to-cyan-400 rounded-2xl flex items-center justify-center mx-auto mb-4">
          <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
          </svg>
        </div>
        <h2 className="text-2xl font-bold text-white mb-2">Company Information</h2>
        <p className="text-gray-400">Tell us about your brand to get started</p>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div className="space-y-2">
          <label className="block text-sm font-semibold text-gray-300">
            Brand Name <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            value={brandConfig.brand_name}
            onChange={(e) => updateBrandConfig({ brand_name: e.target.value })}
            className="w-full px-4 py-3 border border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 bg-[#1A1F2E] text-white placeholder-gray-500 hover:border-gray-500"
            placeholder="e.g., Nespresso"
          />
        </div>
        
        <div className="space-y-2">
          <label className="block text-sm font-semibold text-gray-300">
            Industry <span className="text-red-500">*</span>
          </label>
          <select
            value={brandConfig.industry}
            onChange={(e) => updateBrandConfig({ industry: e.target.value })}
            className="w-full px-4 py-3 border border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 bg-[#1A1F2E] text-white hover:border-gray-500"
          >
            <option value="">Select industry</option>
            <option value="Food & Beverage">Food & Beverage</option>
            <option value="Fashion & Apparel">Fashion & Apparel</option>
            <option value="Technology">Technology</option>
            <option value="Healthcare">Healthcare</option>
            <option value="Finance">Finance</option>
            <option value="Automotive">Automotive</option>
            <option value="Travel & Hospitality">Travel & Hospitality</option>
            <option value="Other">Other</option>
          </select>
        </div>
        
        <div className="md:col-span-2 space-y-2">
          <label className="block text-sm font-semibold text-gray-300">Website</label>
          <input
            type="url"
            value={brandConfig.website}
            onChange={(e) => updateBrandConfig({ website: e.target.value })}
            className="w-full px-4 py-3 border border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 bg-[#1A1F2E] text-white placeholder-gray-500 hover:border-gray-500"
            placeholder="https://yourbrand.com"
          />
        </div>
        
        <div className="md:col-span-2 space-y-2">
          <label className="block text-sm font-semibold text-gray-300">Description</label>
          <textarea
            value={brandConfig.description}
            onChange={(e) => updateBrandConfig({ description: e.target.value })}
            rows={4}
            className="w-full px-4 py-3 border border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 bg-[#1A1F2E] text-white placeholder-gray-500 hover:border-gray-500 resize-none"
            placeholder="Brief description of your brand and what makes it unique..."
          />
        </div>
      </div>
    </div>
  );
}

function GuidelinesStep({ files, setFiles, pdfAnalysis, setPdfAnalysis, setVisualIdentityMode, setBrandId }: any) {
  const handleFileUpload = async (file: File) => {
    setFiles((prev: any) => ({ ...prev, guidelines: { file } }));
    
    // Start PDF analysis
    setPdfAnalysis((prev: any) => ({
      ...prev,
      isProcessing: true,
      isComplete: false,
      error: undefined
    }));

    try {
      // Get authentication token
      const session = await fetchAuthSession();
      const token = session.tokens?.idToken?.toString();

      if (!token) {
        throw new Error('No authentication token available');
      }

      // First, create the brand to get upload URLs
      const brandResponse = await fetch(`${API_ENDPOINT}/brand/onboard`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          brand_name: 'Temp Brand for PDF Analysis',
          industry: 'Other',
          description: 'Temporary brand for PDF analysis'
        })
      });

      if (!brandResponse.ok) {
        throw new Error('Failed to create temporary brand');
      }

      const brandData = await brandResponse.json();
      console.log('Brand created for PDF analysis:', brandData);
      
      // Store the brand ID for later use
      setBrandId(brandData.brand_id);

      // Check if we have upload URLs
      if (brandData.upload_urls?.pdf_guidelines) {
        // Upload PDF to S3 using pre-signed URL
        // Note: Metadata is already included in the presigned URL, don't add headers
        const uploadResponse = await fetch(brandData.upload_urls.pdf_guidelines.upload_url, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/pdf'
          },
          body: file
        });

        if (!uploadResponse.ok) {
          throw new Error('Failed to upload PDF');
        }

        console.log('PDF uploaded successfully');

        // Trigger PDF analysis by calling the analyzer function
        console.log('Starting PDF analysis...');
        
        // Get the analysis_id from the brand response - MUST match what's in the metadata
        const analysisId = brandData.upload_urls?.pdf_guidelines?.analysis_id;
        
        if (!analysisId) {
          console.error('❌ No analysis_id found in brand response!', brandData);
          throw new Error('No analysis_id returned from brand creation');
        }
        
        console.log('🔍 PDF Analysis Flow Debug:');
        console.log('📋 Brand response:', brandData);
        console.log('🆔 Generated/extracted analysis_id:', analysisId);
        console.log('📤 Upload metadata:', {
          'analysis-id': brandData.upload_urls?.pdf_guidelines?.analysis_id,
          'brand-id': brandData.brand_id,
          'org-id': brandData.org_id
        });
        console.log('📁 Guidelines file:', files.guidelines);
        console.log('⏰ Timestamp:', new Date().toISOString());
        
        // Set processing state
        setPdfAnalysis({
          isProcessing: true,
          isComplete: false,
          analysis_id: analysisId
        });
        
        // Poll for PDF analysis results
        const pollAnalysisStatus = async () => {
          const maxAttempts = 20; // 2 minutes max (6s * 20)
          let attempts = 0;
          
          while (attempts < maxAttempts) {
            try {
              console.log(`📞 Polling attempt ${attempts + 1}/${maxAttempts} for analysis_id: ${analysisId}`);
              const session = await fetchAuthSession();
              const token = session.tokens?.idToken?.toString();
              
              const statusResponse = await fetch(`${API_ENDPOINT}/pdf-analysis/${analysisId}`, {
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json'
                }
              });
              
              console.log(`📡 Status response:`, statusResponse.status, statusResponse.statusText);
              
              if (statusResponse.ok) {
                const analysisResult = await statusResponse.json();
                
                if (analysisResult.status === 'completed') {
                  console.log('PDF analysis completed:', analysisResult);
                  
                  setPdfAnalysis({
                    logos: analysisResult.data?.logos || [],
                    colors: analysisResult.data?.colors || [],
                    disclaimers: analysisResult.data?.disclaimers || [],
                    vocabulary: analysisResult.data?.vocabulary || { approved: [], banned: [] },
                    isProcessing: false,
                    isComplete: true,
                    analysis_id: analysisId
                  });
                  
                  setVisualIdentityMode('auto');
                  return; // Success, exit polling
                  
                } else if (analysisResult.status === 'failed') {
                  console.error('PDF analysis failed:', analysisResult.error);
                  setPdfAnalysis({
                    isProcessing: false,
                    isComplete: false,
                    error: analysisResult.error || 'PDF analysis failed',
                    analysis_id: analysisId
                  });
                  return; // Failed, exit polling
                  
                } else if (analysisResult.status === 'processing') {
                  console.log('PDF analysis still processing...');
                  // Continue polling
                }
              } else if (statusResponse.status === 404) {
                // Analysis not started yet - S3 event should trigger it automatically
                console.log(`🚫 Analysis not found (404) - attempt ${attempts + 1}. Expected analysis_id: ${analysisId}`);
                if (attempts === 0) {
                  console.log('⏳ Waiting for S3 event to trigger PDF analysis...');
                } else {
                  console.log('🔄 Still waiting for analysis record to be created...');
                }
              } else {
                console.error(`⚠️ Unexpected response status: ${statusResponse.status}`);
                const errorText = await statusResponse.text();
                console.error(`💥 Error response:`, errorText);
              }
              
            } catch (pollError) {
              console.error('Error polling PDF analysis status:', pollError);
            }
            
            attempts++;
            await new Promise(resolve => setTimeout(resolve, 6000)); // Wait 6 seconds
          }
          
          // Polling timeout
          console.error('PDF analysis polling timed out');
          setPdfAnalysis({
            isProcessing: false,
            isComplete: false,
            error: 'PDF analysis timed out. Please try again.',
            analysis_id: analysisId
          });
        };
        
        // Start polling
        pollAnalysisStatus();
        setVisualIdentityMode('auto');
      } else {
        throw new Error('No upload URL provided by backend');
      }
    } catch (error) {
      console.error('PDF analysis error:', error);
      setPdfAnalysis((prev: any) => ({
        ...prev,
        isProcessing: false,
        error: `Failed to analyze PDF: ${error instanceof Error ? error.message : 'An unknown error occurred'}`
      }));
    }
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <div className="w-16 h-16 bg-gradient-to-r from-orange-400 to-rose-400 rounded-2xl flex items-center justify-center mx-auto mb-4">
          <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
        </div>
        <h2 className="text-2xl font-bold text-white mb-2">Brand Guidelines</h2>
        <p className="text-gray-400">Upload your brand guidelines for AI analysis and compliance rule extraction</p>
      </div>
      
      <div className="border-2 border-dashed border-gray-600 rounded-2xl p-12 text-center bg-gradient-to-br from-[#1A1F2E] to-[#252B3B] hover:from-[#252B3B] hover:to-[#1A1F2E] transition-all duration-300">
        <div className="space-y-6">
          <div className="w-12 h-12 bg-gradient-to-r from-orange-500/20 to-rose-500/20 rounded-xl flex items-center justify-center mx-auto">
            <svg className="w-6 h-6 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 1H7a2 2 0 00-2 2v16a2 2 0 002 2z" />
            </svg>
          </div>
          <div>
            <p className="text-white font-medium mb-2">
              Drop your brand guidelines PDF here
            </p>
            <p className="text-gray-400 text-sm">
              Or click to browse and select your file
            </p>
          </div>
          <input
            type="file"
            accept=".pdf"
            className="hidden"
            id="guidelines-upload"
            onChange={(e) => {
              const file = e.target.files?.[0];
              if (file) {
                handleFileUpload(file);
              }
            }}
          />
          <label
            htmlFor="guidelines-upload"
            className="inline-flex items-center space-x-2 px-6 py-3 bg-[#2A3142] border border-gray-600 rounded-xl text-sm font-medium text-white hover:bg-[#323B4F] hover:border-gray-500 cursor-pointer transition-all duration-200 shadow-lg hover:shadow-xl"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
            </svg>
            <span>Choose PDF File</span>
          </label>
          
          {/* File uploaded indicator */}
          {files.guidelines && !pdfAnalysis.isProcessing && !pdfAnalysis.isComplete && (
            <div className="bg-emerald-500/10 border border-emerald-500/30 rounded-xl p-4 max-w-sm mx-auto">
              <div className="flex items-center space-x-2">
                <svg className="w-5 h-5 text-emerald-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
                <span className="text-sm text-emerald-300 font-medium">{files.guidelines.file.name}</span>
              </div>
            </div>
          )}
          
          {/* Processing indicator */}
          {pdfAnalysis.isProcessing && (
            <div className="bg-blue-500/10 border border-blue-500/30 rounded-xl p-4 max-w-sm mx-auto">
              <div className="flex items-center space-x-3">
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-400"></div>
                <span className="text-sm text-blue-300 font-medium">Analyzing PDF...</span>
              </div>
              <p className="text-xs text-blue-400/80 mt-2">Extracting logos, colors, and compliance rules</p>
            </div>
          )}
          
          {/* Analysis complete */}
          {pdfAnalysis.isComplete && (
            <div className="bg-green-500/10 border border-green-500/30 rounded-xl p-4 max-w-md mx-auto">
              <div className="flex items-center space-x-2 mb-3">
                <svg className="w-5 h-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
                <span className="text-sm text-green-300 font-medium">Analysis Complete!</span>
              </div>
              <div className="text-xs text-green-400/80 space-y-1">
                <p>• {pdfAnalysis.logos?.length || 0} logos detected</p>
                <p>• {pdfAnalysis.colors?.length || 0} brand colors extracted</p>
                <p>• {pdfAnalysis.disclaimers?.length || 0} disclaimers found</p>
                <p>• Brand vocabulary analyzed</p>
              </div>
            </div>
          )}
          
          {/* Error state */}
          {pdfAnalysis.error && (
            <div className="bg-red-500/10 border border-red-500/30 rounded-xl p-4 max-w-sm mx-auto">
              <div className="flex items-center space-x-2">
                <svg className="w-5 h-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
                <span className="text-sm text-red-300 font-medium">Analysis Failed</span>
              </div>
              <p className="text-xs text-red-400/80 mt-1">{pdfAnalysis.error}</p>
            </div>
          )}
        </div>
      </div>
      
      {!files.guidelines && (
        <div className="bg-blue-500/10 border border-blue-500/30 rounded-xl p-4">
          <div className="flex items-start space-x-3">
            <svg className="w-5 h-5 text-blue-400 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
            </svg>
            <div>
              <p className="text-blue-300 font-medium text-sm mb-1">AI-Powered Analysis Available</p>
              <p className="text-blue-400/80 text-sm">Upload your brand guidelines to automatically extract logos, colors, and compliance rules for the next steps.</p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

function VisualIdentityStep({ brandConfig, updateBrandConfig, files, setFiles, pdfAnalysis, visualIdentityMode, setVisualIdentityMode, selectedLogoKeys, setSelectedLogoKeys, brandId, handleConfirmLogos, isConfirmingLogos }: any) {
  const addColor = () => {
    const newColor = '#000000';
    updateBrandConfig({
      color_palette: [...brandConfig.color_palette, newColor]
    });
  };

  const updateColor = (index: number, color: string) => {
    const newPalette = [...brandConfig.color_palette];
    newPalette[index] = color;
    updateBrandConfig({ color_palette: newPalette });
  };

  const removeColor = (index: number) => {
    const newPalette = brandConfig.color_palette.filter((_: any, i: number) => i !== index);
    updateBrandConfig({ color_palette: newPalette });
  };

  const useExtractedColors = () => {
    if (pdfAnalysis.colors) {
      const extractedColors = pdfAnalysis.colors.map((color: any) => color.hex);
      updateBrandConfig({ color_palette: extractedColors });
    }
  };

  const switchToManualMode = () => {
    setVisualIdentityMode('manual');
  };

  const switchToAutoMode = () => {
    if (pdfAnalysis.isComplete) {
      setVisualIdentityMode('auto');
      useExtractedColors();
    }
  };

  return (
    <div className="space-y-10">
      <div className="text-center">
        <div className="w-16 h-16 bg-gradient-to-r from-purple-400 to-pink-400 rounded-2xl flex items-center justify-center mx-auto mb-4">
          <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z" />
          </svg>
        </div>
        <h2 className="text-2xl font-bold text-white mb-2">Visual Identity</h2>
        <p className="text-gray-400">
          {pdfAnalysis.isComplete 
            ? "Use AI-extracted assets or manually upload your brand assets" 
            : "Upload your brand assets and define your visual identity"}
        </p>
      </div>

      {/* Mode Switcher */}
      {pdfAnalysis.isComplete && (
        <div className="bg-gradient-to-r from-blue-500/10 to-purple-500/10 border border-blue-500/30 rounded-2xl p-6">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h3 className="text-lg font-semibold text-white mb-1">PDF Analysis Available</h3>
              <p className="text-sm text-blue-300">We've extracted brand assets from your guidelines. Choose how to proceed:</p>
            </div>
          </div>
          <div className="flex space-x-4">
            <button
              onClick={switchToAutoMode}
              className={`flex-1 flex items-center justify-center space-x-3 px-6 py-4 rounded-xl border-2 transition-all ${
                visualIdentityMode === 'auto'
                  ? 'bg-blue-500/20 border-blue-500 text-blue-300'
                  : 'bg-[#1A1F2E] border-gray-600 text-gray-300 hover:border-blue-500/50'
              }`}
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
              </svg>
              <div className="text-left">
                <div className="font-medium">Use AI-Extracted</div>
                <div className="text-xs opacity-80">{pdfAnalysis.logos?.length || 0} logos, {pdfAnalysis.colors?.length || 0} colors</div>
              </div>
            </button>
            <button
              onClick={switchToManualMode}
              className={`flex-1 flex items-center justify-center space-x-3 px-6 py-4 rounded-xl border-2 transition-all ${
                visualIdentityMode === 'manual'
                  ? 'bg-purple-500/20 border-purple-500 text-purple-300'
                  : 'bg-[#1A1F2E] border-gray-600 text-gray-300 hover:border-purple-500/50'
              }`}
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
              </svg>
              <div className="text-left">
                <div className="font-medium">Manual Upload</div>
                <div className="text-xs opacity-80">Upload your own assets</div>
              </div>
            </button>
          </div>
        </div>
      )}

      {/* AI-Extracted Logos */}
      {visualIdentityMode === 'auto' && pdfAnalysis.logos && pdfAnalysis.logos.length > 0 && (
        <div className="bg-gradient-to-br from-[#1A1F2E] to-[#252B3B] rounded-2xl p-6">
          <ExtractedLogos 
            logos={pdfAnalysis.logos}
            onSelectionChange={setSelectedLogoKeys}
          />
          
          {/* Confirm Logos Button */}
          {selectedLogoKeys.length > 0 && (
            <div className="mt-6 flex justify-end">
              <button
                onClick={() => {
                  if (brandId) {
                    handleConfirmLogos(selectedLogoKeys, brandId);
                  } else {
                    alert('Brand ID not available. Please ensure the brand is created first.');
                  }
                }}
                disabled={isConfirmingLogos}
                className={`px-6 py-3 bg-gradient-to-r from-purple-600 to-purple-500 text-white rounded-xl hover:from-purple-700 hover:to-purple-600 transition-all duration-200 shadow-lg hover:shadow-xl ${
                  isConfirmingLogos ? 'opacity-50 cursor-not-allowed' : ''
                }`}
              >
                {isConfirmingLogos ? 'Confirming...' : `Confirm Selected Logos (${selectedLogoKeys.length})`}
              </button>
            </div>
          )}
        </div>
      )}

      {/* Manual Logo Upload */}
      {visualIdentityMode === 'manual' && (
        <div className="bg-gradient-to-br from-[#1A1F2E] to-[#252B3B] rounded-2xl p-6">
          <h3 className="text-lg font-semibold text-white mb-4 flex items-center space-x-2">
            <div className="w-8 h-8 bg-gradient-to-r from-indigo-500/20 to-purple-500/20 rounded-lg flex items-center justify-center">
              <svg className="w-5 h-5 text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
              </svg>
            </div>
            <span>Brand Logos</span>
          </h3>
          <div className="border-2 border-dashed border-gray-600 rounded-xl p-8 bg-[#1A1F2E]/50">
            <p className="text-gray-400 mb-4 text-center">Upload logo variants (PNG, JPG, SVG formats supported)</p>
            <input
              type="file"
              accept=".png,.jpg,.jpeg,.svg"
              multiple
              className="block w-full text-sm text-gray-400 file:mr-4 file:py-3 file:px-6 file:rounded-xl file:border-0 file:text-sm file:font-medium file:bg-gradient-to-r file:from-indigo-500/20 file:to-purple-500/20 file:text-indigo-300 hover:file:from-indigo-500/30 hover:file:to-purple-500/30 transition-all file:shadow-lg"
              onChange={(e) => {
                const newFiles = Array.from(e.target.files || []).map(file => ({ file }));
                setFiles((prev: any) => ({ ...prev, logos: [...prev.logos, ...newFiles] }));
              }}
            />
            {files.logos.length > 0 && (
              <div className="mt-6 space-y-3">
                <p className="text-sm font-medium text-gray-300">{files.logos.length} logo file(s) uploaded:</p>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                  {files.logos.map((logo: any, index: number) => (
                    <div key={index} className="bg-emerald-500/10 border border-emerald-500/30 rounded-lg p-3 flex items-center space-x-2">
                      <svg className="w-4 h-4 text-emerald-400" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                      </svg>
                      <span className="text-sm text-emerald-300 font-medium truncate">{logo.file.name}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Color Palette */}
      <div className="bg-gradient-to-br from-[#1A1F2E] to-[#252B3B] rounded-2xl p-6">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-white flex items-center space-x-2">
            <div className="w-8 h-8 bg-gradient-to-r from-pink-500/20 to-orange-500/20 rounded-lg flex items-center justify-center">
              <svg className="w-5 h-5 text-pink-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z" />
              </svg>
            </div>
            <span>Color Palette</span>
          </h3>
          {visualIdentityMode === 'auto' && pdfAnalysis.colors && (
            <button
              onClick={useExtractedColors}
              className="text-sm px-3 py-1 bg-blue-500/20 text-blue-300 border border-blue-500/30 rounded-lg hover:bg-blue-500/30 transition-all"
            >
              Refresh from PDF
            </button>
          )}
        </div>
        
        {visualIdentityMode === 'auto' && pdfAnalysis.colors && pdfAnalysis.colors.length > 0 && (
          <div className="mb-6 p-4 bg-blue-500/10 border border-blue-500/30 rounded-xl">
            <p className="text-sm text-blue-300 mb-3">AI-extracted colors from your brand guidelines:</p>
            <div className="flex flex-wrap gap-2">
              {pdfAnalysis.colors.map((color: any, index: number) => (
                <div key={index} className="flex items-center space-x-2 bg-[#1A1F2E] rounded-lg px-3 py-2">
                  <div
                    className="w-6 h-6 rounded border border-gray-600"
                    style={{ backgroundColor: color.hex }}
                  ></div>
                  <span className="text-xs text-white font-mono">{color.hex}</span>
                  <span className="text-xs text-gray-400">({Math.round(color.frequency * 100)}%)</span>
                </div>
              ))}
            </div>
          </div>
        )}

        <div className="space-y-6">
          <div className="flex flex-wrap gap-4">
            {brandConfig.color_palette.map((color: string, index: number) => (
              <div key={index} className="bg-[#2A3142] rounded-xl p-4 border border-gray-700 shadow-lg hover:shadow-xl transition-all">
                <div className="flex items-center space-x-3">
                  <input
                    type="color"
                    value={color}
                    onChange={(e) => updateColor(index, e.target.value)}
                    className="w-14 h-14 rounded-xl border-2 border-gray-600 cursor-pointer"
                  />
                  <div className="flex-1">
                    <input
                      type="text"
                      value={color}
                      onChange={(e) => updateColor(index, e.target.value)}
                      className="w-full px-3 py-2 text-sm border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-[#1A1F2E] text-white"
                    />
                  </div>
                  <button
                    onClick={() => removeColor(index)}
                    className="w-8 h-8 flex items-center justify-center text-gray-400 hover:text-rose-400 hover:bg-rose-500/10 rounded-lg transition-all"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              </div>
            ))}
          </div>
          <button
            onClick={addColor}
            className="flex items-center space-x-2 px-4 py-3 text-sm bg-[#2A3142] border-2 border-dashed border-gray-600 text-gray-300 rounded-xl hover:bg-[#323B4F] hover:border-gray-500 transition-all"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            <span>Add Color</span>
          </button>
        </div>
      </div>
    </div>
  );
}

function VerbalIdentityStep({ brandConfig, updateBrandConfig }: any) {
  const updateVocabulary = (type: 'approved' | 'banned' | 'required', value: string) => {
    const terms = value.split(',').map(term => term.trim()).filter(term => term);
    updateBrandConfig({
      brand_vocabulary: {
        ...brandConfig.brand_vocabulary,
        [type]: terms
      }
    });
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <div className="w-16 h-16 bg-gradient-to-r from-blue-400 to-indigo-400 rounded-2xl flex items-center justify-center mx-auto mb-4">
          <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
          </svg>
        </div>
        <h2 className="text-2xl font-bold text-white mb-2">Verbal Identity</h2>
        <p className="text-gray-400">Define your brand's voice, tone, and vocabulary guidelines</p>
      </div>
      
      <div className="space-y-3">
        <label className="block text-sm font-semibold text-gray-300">Brand Tone & Voice</label>
        <textarea
          value={brandConfig.brand_tone}
          onChange={(e) => updateBrandConfig({ brand_tone: e.target.value })}
          rows={4}
          className="w-full px-4 py-3 border border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 bg-[#1A1F2E] text-white placeholder-gray-500 hover:border-gray-500 resize-none"
          placeholder="e.g., Premium, sophisticated, inviting. Maintain European flair; avoid slang. Be conversational but not casual."
        />
        <p className="text-gray-500 text-sm">Describe your brand's personality, tone, and communication style</p>
      </div>

      <div className="space-y-3">
        <label className="block text-sm font-semibold text-gray-300 flex items-center space-x-2">
          <span>Approved Terms</span>
          <div className="w-5 h-5 bg-emerald-500/20 rounded-full flex items-center justify-center">
            <svg className="w-3 h-3 text-emerald-400" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
            </svg>
          </div>
        </label>
        <input
          type="text"
          value={brandConfig.brand_vocabulary.approved.join(', ')}
          onChange={(e) => updateVocabulary('approved', e.target.value)}
          className="w-full px-4 py-3 border border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 bg-[#1A1F2E] text-white placeholder-gray-500 hover:border-gray-500"
          placeholder="e.g., Nespresso, Original, Vertuo (comma-separated)"
        />
        <p className="text-gray-500 text-sm">Terms that align with your brand and should be used in content</p>
      </div>

      <div className="space-y-3">
        <label className="block text-sm font-semibold text-gray-300 flex items-center space-x-2">
          <span>Banned Terms</span>
          <div className="w-5 h-5 bg-rose-500/20 rounded-full flex items-center justify-center">
            <svg className="w-3 h-3 text-rose-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </div>
        </label>
        <input
          type="text"
          value={brandConfig.brand_vocabulary.banned.join(', ')}
          onChange={(e) => updateVocabulary('banned', e.target.value)}
          className="w-full px-4 py-3 border border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 bg-[#1A1F2E] text-white placeholder-gray-500 hover:border-gray-500"
          placeholder="e.g., free refill, discount, cheap (comma-separated)"
        />
        <p className="text-gray-500 text-sm">Terms that conflict with your brand and should never appear</p>
      </div>

      <div className="space-y-3">
        <label className="block text-sm font-semibold text-gray-300">Required Disclaimers</label>
        <textarea
          value={brandConfig.disclaimers_required.join('\n')}
          onChange={(e) => updateBrandConfig({ 
            disclaimers_required: e.target.value.split('\n').filter(line => line.trim()) 
          })}
          rows={3}
          className="w-full px-4 py-3 border border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 bg-[#1A1F2E] text-white placeholder-gray-500 hover:border-gray-500 resize-none"
          placeholder="e.g., © Nespresso 2025\n*Terms and conditions apply (one per line)"
        />
        <p className="text-gray-500 text-sm">Legal disclaimers or copyright notices that must appear in content</p>
      </div>
    </div>
  );
}

function GoldenSetStep({ files, setFiles }: any) {
  return (
    <div className="space-y-8">
      <div className="text-center">
        <div className="w-16 h-16 bg-gradient-to-r from-yellow-400 to-orange-400 rounded-2xl flex items-center justify-center mx-auto mb-4">
          <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
          </svg>
        </div>
        <h2 className="text-2xl font-bold text-white mb-2">Golden Set Examples</h2>
        <p className="text-gray-400">Upload perfect example creatives (optional but recommended)</p>
      </div>
      
      <div className="border-2 border-dashed border-gray-600 rounded-2xl p-12 text-center bg-gradient-to-br from-[#1A1F2E] to-[#252B3B] hover:from-[#252B3B] hover:to-[#1A1F2E] transition-all duration-300">
        <div className="space-y-6">
          <div className="w-12 h-12 bg-gradient-to-r from-yellow-500/20 to-orange-500/20 rounded-xl flex items-center justify-center mx-auto">
            <svg className="w-6 h-6 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </div>
          <div>
            <p className="text-white font-medium mb-2">
              Drop your golden set examples here
            </p>
            <p className="text-gray-400 text-sm">
              Upload 5-10 perfect examples of your brand creative
            </p>
          </div>
          <input
            type="file"
            accept="image/*,video/*"
            multiple
            className="hidden"
            id="golden-upload"
            onChange={(e) => {
              const newFiles = Array.from(e.target.files || []).map(file => ({ file }));
              setFiles((prev: any) => ({ ...prev, goldenSet: [...prev.goldenSet, ...newFiles] }));
            }}
          />
          <label
            htmlFor="golden-upload"
            className="inline-flex items-center space-x-2 px-6 py-3 bg-[#2A3142] border border-gray-600 rounded-xl text-sm font-medium text-white hover:bg-[#323B4F] hover:border-gray-500 cursor-pointer transition-all duration-200 shadow-lg hover:shadow-xl"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
            </svg>
            <span>Choose Files</span>
          </label>
          {files.goldenSet.length > 0 && (
            <div className="mt-6 max-w-sm mx-auto">
              <p className="text-sm font-medium text-gray-300 mb-3">
                {files.goldenSet.length} files selected:
              </p>
              <div className="space-y-2">
                {files.goldenSet.map((file: any, index: number) => (
                  <div key={index} className="bg-emerald-500/10 border border-emerald-500/30 rounded-lg p-3 flex items-center space-x-2">
                    <svg className="w-4 h-4 text-emerald-400" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                    <span className="text-sm text-emerald-300 font-medium truncate">{file.file.name}</span>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

function ReviewStep({ brandConfig, files, onSubmit, isSubmitting, submitResult, redirectCountdown, skipAutoRedirect, handleGoNow, handleSkipRedirect }: any) {
  return (
    <div className="space-y-8">
      <div className="text-center">
        <div className="w-16 h-16 bg-gradient-to-r from-emerald-400 to-teal-400 rounded-2xl flex items-center justify-center mx-auto mb-4">
          <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <h2 className="text-2xl font-bold text-white mb-2">Review & Submit</h2>
        <p className="text-gray-400">Review your brand configuration before creating your compliance profile</p>
      </div>
      
      <div className="bg-gradient-to-br from-[#1A1F2E] to-[#252B3B] rounded-2xl p-8 space-y-6">
        {/* Brand Information */}
        <div className="bg-[#2A3142] rounded-xl p-6 border border-gray-700">
          <div className="flex items-center space-x-3 mb-4">
            <div className="w-10 h-10 bg-gradient-to-r from-indigo-500/20 to-purple-500/20 rounded-lg flex items-center justify-center">
              <svg className="w-5 h-5 text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-white">Brand Information</h3>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <p className="text-sm text-gray-500 mb-1">Brand Name</p>
              <p className="font-medium text-white">{brandConfig.brand_name || 'Not specified'}</p>
            </div>
            <div>
              <p className="text-sm text-gray-500 mb-1">Industry</p>
              <p className="font-medium text-white">{brandConfig.industry || 'Not specified'}</p>
            </div>
            {brandConfig.website && (
              <div className="md:col-span-2">
                <p className="text-sm text-gray-500 mb-1">Website</p>
                <p className="font-medium text-white">{brandConfig.website}</p>
              </div>
            )}
            {brandConfig.description && (
              <div className="md:col-span-2">
                <p className="text-sm text-gray-500 mb-1">Description</p>
                <p className="text-gray-300">{brandConfig.description}</p>
              </div>
            )}
          </div>
        </div>
        
        {/* Files Summary */}
        <div className="bg-[#2A3142] rounded-xl p-6 border border-gray-700">
          <div className="flex items-center space-x-3 mb-4">
            <div className="w-10 h-10 bg-gradient-to-r from-orange-500/20 to-rose-500/20 rounded-lg flex items-center justify-center">
              <svg className="w-5 h-5 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 1H7a2 2 0 00-2 2v16a2 2 0 002 2z" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-white">Uploaded Assets</h3>
          </div>
          <div className="space-y-3">
            {files.guidelines ? (
              <div className="flex items-center space-x-2 text-emerald-400">
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
                <span className="text-sm font-medium">Brand guidelines PDF uploaded</span>
              </div>
            ) : (
              <div className="flex items-center space-x-2 text-gray-500">
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
                <span className="text-sm">No brand guidelines uploaded</span>
              </div>
            )}
            
            {files.logos.length > 0 ? (
              <div className="flex items-center space-x-2 text-emerald-400">
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
                <span className="text-sm font-medium">{files.logos.length} logo file(s) uploaded</span>
              </div>
            ) : (
              <div className="flex items-center space-x-2 text-gray-500">
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
                <span className="text-sm">No logo files uploaded</span>
              </div>
            )}
            
            {files.goldenSet.length > 0 ? (
              <div className="flex items-center space-x-2 text-emerald-700">
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
                <span className="text-sm font-medium">{files.goldenSet.length} golden set example(s) uploaded</span>
              </div>
            ) : (
              <div className="flex items-center space-x-2 text-slate-400">
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
                <span className="text-sm">No golden set examples uploaded</span>
              </div>
            )}
          </div>
        </div>
        
        {/* Color Palette */}
        {brandConfig.color_palette.length > 0 && (
          <div className="bg-[#2A3142] rounded-xl p-6 border border-gray-700">
            <div className="flex items-center space-x-3 mb-4">
              <div className="w-10 h-10 bg-gradient-to-r from-pink-500/20 to-orange-500/20 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-pink-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z" />
                </svg>
              </div>
              <h3 className="text-lg font-semibold text-white">Color Palette</h3>
            </div>
            <div className="flex flex-wrap gap-3">
              {brandConfig.color_palette.map((color: string, index: number) => (
                <div key={index} className="flex items-center space-x-2 bg-[#1A1F2E] rounded-lg p-2">
                  <div 
                    className="w-8 h-8 rounded-lg border-2 border-gray-600 shadow-sm" 
                    style={{ backgroundColor: color }}
                  />
                  <span className="text-sm font-mono text-gray-400">{color}</span>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>

      <button
        onClick={onSubmit}
        disabled={isSubmitting}
        className="w-full py-4 bg-gradient-to-r from-emerald-600 to-teal-600 text-white rounded-2xl hover:from-emerald-700 hover:to-teal-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-lg hover:shadow-xl font-semibold text-lg"
      >
        {isSubmitting ? (
          <div className="flex items-center justify-center space-x-3">
            <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
            <span>Creating Your Brand...</span>
          </div>
        ) : (
          <div className="flex items-center justify-center space-x-2">
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
            <span>Create Brand Profile</span>
          </div>
        )}
      </button>

      {submitResult && (
        <div className={`rounded-2xl p-6 border ${submitResult.error ? 'bg-rose-500/10 border-rose-500/30' : 'bg-emerald-500/10 border-emerald-500/30'}`}>
          {submitResult.error ? (
            <div className="flex items-start space-x-3">
              <svg className="w-6 h-6 text-rose-400 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L5.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
              <div>
                <p className="text-rose-300 font-semibold mb-1">Error Creating Brand</p>
                <p className="text-rose-400/80">{submitResult.error}</p>
              </div>
            </div>
          ) : (
            <div className="space-y-4">
              <div className="flex items-start space-x-3">
                <svg className="w-6 h-6 text-emerald-400 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
                <div className="flex-1">
                  <p className="text-emerald-300 font-semibold mb-2">🎉 Brand Created Successfully!</p>
                  <div className="bg-[#2A3142] rounded-lg p-3 border border-emerald-500/30">
                    <p className="text-sm text-emerald-400 mb-1">Brand ID:</p>
                    <p className="font-mono text-sm text-gray-300">{submitResult.data.brand_id}</p>
                  </div>
                  <p className="text-emerald-400/80 text-sm mt-3">Your brand is now ready for AI-powered compliance analysis!</p>
                </div>
              </div>
              
              {/* Countdown and Navigation */}
              {redirectCountdown !== null && !skipAutoRedirect ? (
                <div className="bg-gradient-to-r from-purple-500/10 to-indigo-500/10 border border-purple-500/30 rounded-lg p-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="w-8 h-8 bg-purple-500/20 rounded-full flex items-center justify-center">
                        <span className="text-purple-400 font-semibold text-sm">{redirectCountdown}</span>
                      </div>
                      <div>
                        <p className="text-purple-300 font-medium text-sm">
                          Redirecting to Business Center in {redirectCountdown} seconds...
                        </p>
                        <p className="text-purple-400/70 text-xs">
                          Start analyzing your creative assets and managing your brand
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={handleGoNow}
                        className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white text-sm font-medium rounded-lg transition-colors"
                      >
                        Go Now
                      </button>
                      <button
                        onClick={handleSkipRedirect}
                        className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white text-sm font-medium rounded-lg transition-colors"
                      >
                        Stay Here
                      </button>
                    </div>
                  </div>
                </div>
              ) : skipAutoRedirect ? (
                <div className="bg-gradient-to-r from-blue-500/10 to-cyan-500/10 border border-blue-500/30 rounded-lg p-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <svg className="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      <div>
                        <p className="text-blue-300 font-medium text-sm">Ready when you are!</p>
                        <p className="text-blue-400/70 text-xs">Your brand is set up and ready for creative analysis</p>
                      </div>
                    </div>
                    <button
                      onClick={handleGoNow}
                      className="px-6 py-2 bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 text-white text-sm font-medium rounded-lg transition-all shadow-lg"
                    >
                      Go to Business Center
                    </button>
                  </div>
                </div>
              ) : null}
            </div>
          )}
        </div>
      )}
    </div>
  );
}